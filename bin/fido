#!/usr/bin/python
# This file is part of Fido.
#
# Copyright(c) 2015 Simone Margaritelli
# evilsocket@gmail.com
# http://www.evilsocket.net
#
# This file may be licensed under the terms of of the
# GNU General Public License Version 2 (the ``GPL'').
#
# Software distributed under the License is distributed
# on an ``AS IS'' basis, WITHOUT WARRANTY OF ANY KIND, either
# express or implied. See the GPL for the specific language
# governing rights and limitations.
#
# You should have received a copy of the GPL along with this
# program. If not, go to http://www.gnu.org/licenses/gpl.html
# or write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
import sys
import os
import collections
from fido.core.log import Log
from fido.core.loader import Loader

loader = Loader()

TEMPLATES = loader.templates
ACTIONS = collections.OrderedDict((
    ( "help",   "Print the usage menu." ),
    ( "create", "Create a project with the specified template, requires a template and a path." ),
    ( "build",  "Build the current project." ),
    ( "clean",  "Clean built files for the current project." ),
    ( "reset",  "Available only for certain templates, remote every build generated file." )
))

def get_pad(l):
    pad = 0
    for name in l:
        if len(name) > pad:
            pad = len(name)
    return pad

def usage():
    print "\nUsage: fido <action> [template] (path)"

    a_pad = get_pad(ACTIONS)
    t_pad = get_pad(TEMPLATES)
    pad = str( max( a_pad, t_pad ) )

    print "\nAvailable actions:\n"
    for name, desc in ACTIONS.iteritems():
        print ( "\t%" + pad + "s : %s" ) % ( name, desc )

    print "\nAvailable templates:\n"
    for name, template in TEMPLATES.iteritems():
        print ( "\t%" + pad + "s : %s" ) % ( template.get_name(), template.get_description() )

    print
    quit()

def get_project_template():
    if not os.path.isfile('.fido'):
        Log.e( "Not a fido project." )
        quit()

    with open( '.fido', 'rt' ) as fd:
        for line in fd:
            if line[0] == "#":
                continue
            template = line.strip()

    if template not in TEMPLATES:
        Log.e( "Invalid template specified in .fido file." )
        quit()

    return template

def main():
    if len(sys.argv) < 2:
        usage()

    action = sys.argv[1]
    if action not in ACTIONS:
        Log.e( "Invalid action specified." )
        usage()

    if action == "help":
        usage()

    elif action == "create":
        if len(sys.argv) < 4:
            Log.e( "No template or name specified." )
            usage()

        template = sys.argv[2]
        if template not in TEMPLATES:
            Log.e( "Invalid template specified." )
            usage()

        name = sys.argv[3]
        if os.path.exists(name):
            Log.e( "Path '%s' already exists." % name )
            quit()

        Log.i( "Creating project '%s' with template '%s' ..." % ( name, template ) )

        TEMPLATES[template].do_create(name)

    elif action == "build":
        template = get_project_template()
        TEMPLATES[template].do_build()

    elif action == "clean":
        template = get_project_template()
        TEMPLATES[template].do_clean()

    elif action == "reset":
        template = get_project_template()
        TEMPLATES[template].do_reset()

if __name__ == '__main__':
    main()